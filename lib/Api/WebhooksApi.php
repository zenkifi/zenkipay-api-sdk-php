<?php
/**
 * WebhooksApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Zenkipay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zenkipay API
 *
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zenkipay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Zenkipay\ApiException;
use Zenkipay\Configuration;
use Zenkipay\HeaderSelector;
use Zenkipay\ObjectSerializer;

/**
 * WebhooksApi Class Doc Comment
 *
 * @category Class
 * @package  Zenkipay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WebhooksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'sendEvent' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sendEvent
     *
     * Event notifications for merchant
     *
     * @param  string $svix_id Unique message identifier for the webhook message. This identifier is unique across all messages, but will be the same when the same webhook is forwarded (for example, due to a previous error). (required)
     * @param  string $svix_timestamp Date and time when the webhook is sent to the merchant, in milliseconds and UTC format.  The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds (in ISO 8601: 1970-01-01T00: 00:00Z) (required)
     * @param  string $svix_signature Base64 encoded signature (delimited by spaces) on the sent content, the signature is generated from the following structure: signed_content &#x3D; \&quot;${svix_id}.${svix_timestamp}.${body}\&quot;. (required)
     * @param  string $content_type Content Type accepted. (required)
     * @param  \Zenkipay\Model\Webhook $webhook A JSON structure will be sent that will have the information about the event to notify the merchant. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEvent'] to see the possible values for this operation
     *
     * @throws \Zenkipay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendEvent($svix_id, $svix_timestamp, $svix_signature, $content_type, $webhook = null, string $contentType = self::contentTypes['sendEvent'][0])
    {
        $this->sendEventWithHttpInfo($svix_id, $svix_timestamp, $svix_signature, $content_type, $webhook, $contentType);
    }

    /**
     * Operation sendEventWithHttpInfo
     *
     * Event notifications for merchant
     *
     * @param  string $svix_id Unique message identifier for the webhook message. This identifier is unique across all messages, but will be the same when the same webhook is forwarded (for example, due to a previous error). (required)
     * @param  string $svix_timestamp Date and time when the webhook is sent to the merchant, in milliseconds and UTC format.  The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds (in ISO 8601: 1970-01-01T00: 00:00Z) (required)
     * @param  string $svix_signature Base64 encoded signature (delimited by spaces) on the sent content, the signature is generated from the following structure: signed_content &#x3D; \&quot;${svix_id}.${svix_timestamp}.${body}\&quot;. (required)
     * @param  string $content_type Content Type accepted. (required)
     * @param  \Zenkipay\Model\Webhook $webhook A JSON structure will be sent that will have the information about the event to notify the merchant. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEvent'] to see the possible values for this operation
     *
     * @throws \Zenkipay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEventWithHttpInfo($svix_id, $svix_timestamp, $svix_signature, $content_type, $webhook = null, string $contentType = self::contentTypes['sendEvent'][0])
    {
        $request = $this->sendEventRequest($svix_id, $svix_timestamp, $svix_signature, $content_type, $webhook, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendEventAsync
     *
     * Event notifications for merchant
     *
     * @param  string $svix_id Unique message identifier for the webhook message. This identifier is unique across all messages, but will be the same when the same webhook is forwarded (for example, due to a previous error). (required)
     * @param  string $svix_timestamp Date and time when the webhook is sent to the merchant, in milliseconds and UTC format.  The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds (in ISO 8601: 1970-01-01T00: 00:00Z) (required)
     * @param  string $svix_signature Base64 encoded signature (delimited by spaces) on the sent content, the signature is generated from the following structure: signed_content &#x3D; \&quot;${svix_id}.${svix_timestamp}.${body}\&quot;. (required)
     * @param  string $content_type Content Type accepted. (required)
     * @param  \Zenkipay\Model\Webhook $webhook A JSON structure will be sent that will have the information about the event to notify the merchant. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEventAsync($svix_id, $svix_timestamp, $svix_signature, $content_type, $webhook = null, string $contentType = self::contentTypes['sendEvent'][0])
    {
        return $this->sendEventAsyncWithHttpInfo($svix_id, $svix_timestamp, $svix_signature, $content_type, $webhook, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEventAsyncWithHttpInfo
     *
     * Event notifications for merchant
     *
     * @param  string $svix_id Unique message identifier for the webhook message. This identifier is unique across all messages, but will be the same when the same webhook is forwarded (for example, due to a previous error). (required)
     * @param  string $svix_timestamp Date and time when the webhook is sent to the merchant, in milliseconds and UTC format.  The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds (in ISO 8601: 1970-01-01T00: 00:00Z) (required)
     * @param  string $svix_signature Base64 encoded signature (delimited by spaces) on the sent content, the signature is generated from the following structure: signed_content &#x3D; \&quot;${svix_id}.${svix_timestamp}.${body}\&quot;. (required)
     * @param  string $content_type Content Type accepted. (required)
     * @param  \Zenkipay\Model\Webhook $webhook A JSON structure will be sent that will have the information about the event to notify the merchant. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEventAsyncWithHttpInfo($svix_id, $svix_timestamp, $svix_signature, $content_type, $webhook = null, string $contentType = self::contentTypes['sendEvent'][0])
    {
        $returnType = '';
        $request = $this->sendEventRequest($svix_id, $svix_timestamp, $svix_signature, $content_type, $webhook, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEvent'
     *
     * @param  string $svix_id Unique message identifier for the webhook message. This identifier is unique across all messages, but will be the same when the same webhook is forwarded (for example, due to a previous error). (required)
     * @param  string $svix_timestamp Date and time when the webhook is sent to the merchant, in milliseconds and UTC format.  The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds (in ISO 8601: 1970-01-01T00: 00:00Z) (required)
     * @param  string $svix_signature Base64 encoded signature (delimited by spaces) on the sent content, the signature is generated from the following structure: signed_content &#x3D; \&quot;${svix_id}.${svix_timestamp}.${body}\&quot;. (required)
     * @param  string $content_type Content Type accepted. (required)
     * @param  \Zenkipay\Model\Webhook $webhook A JSON structure will be sent that will have the information about the event to notify the merchant. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendEventRequest($svix_id, $svix_timestamp, $svix_signature, $content_type, $webhook = null, string $contentType = self::contentTypes['sendEvent'][0])
    {

        // verify the required parameter 'svix_id' is set
        if ($svix_id === null || (is_array($svix_id) && count($svix_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $svix_id when calling sendEvent'
            );
        }

        // verify the required parameter 'svix_timestamp' is set
        if ($svix_timestamp === null || (is_array($svix_timestamp) && count($svix_timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $svix_timestamp when calling sendEvent'
            );
        }

        // verify the required parameter 'svix_signature' is set
        if ($svix_signature === null || (is_array($svix_signature) && count($svix_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $svix_signature when calling sendEvent'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling sendEvent'
            );
        }



        $resourcePath = '/URL_MERCHANT';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($svix_id !== null) {
            $headerParams['Svix-Id'] = ObjectSerializer::toHeaderValue($svix_id);
        }
        // header params
        if ($svix_timestamp !== null) {
            $headerParams['Svix-Timestamp'] = ObjectSerializer::toHeaderValue($svix_timestamp);
        }
        // header params
        if ($svix_signature !== null) {
            $headerParams['Svix-Signature'] = ObjectSerializer::toHeaderValue($svix_signature);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($webhook)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($webhook));
            } else {
                $httpBody = $webhook;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
