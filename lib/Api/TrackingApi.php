<?php
/**
 * TrackingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Zenkipay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zenkipay API
 *
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zenkipay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Zenkipay\ApiException;
use Zenkipay\Configuration;
use Zenkipay\HeaderSelector;
use Zenkipay\ObjectSerializer;

/**
 * TrackingApi Class Doc Comment
 *
 * @category Class
 * @package  Zenkipay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrackingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addEventTracking' => [
            'application/json',
        ],
        'registerTrackingOrders' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addEventTracking
     *
     * Shipping Status Update
     *
     * @param  string $zenki_order_id Unique order identifier generated by Zenkipay. (required)
     * @param  string $zenki_track_id Unique tracking identifier generated by Zenkipay. (required)
     * @param  string $content_type Content type accepted. (required)
     * @param  string $accept Accepted formats. (required)
     * @param  string $x_zenki_plugin_id Unique customer identifier used to establish connection with Zenkipay services. (optional)
     * @param  string $accept_language Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
     * @param  \Zenkipay\Model\AddTrackingEvent $add_tracking_event A JSON structure will be sent that will have the required information to update the shipping status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEventTracking'] to see the possible values for this operation
     *
     * @throws \Zenkipay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Zenkipay\Model\TrackingEventsInner[]|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse
     */
    public function addEventTracking($zenki_order_id, $zenki_track_id, $content_type, $accept, $x_zenki_plugin_id = null, $accept_language = null, $add_tracking_event = null, string $contentType = self::contentTypes['addEventTracking'][0])
    {
        list($response) = $this->addEventTrackingWithHttpInfo($zenki_order_id, $zenki_track_id, $content_type, $accept, $x_zenki_plugin_id, $accept_language, $add_tracking_event, $contentType);
        return $response;
    }

    /**
     * Operation addEventTrackingWithHttpInfo
     *
     * Shipping Status Update
     *
     * @param  string $zenki_order_id Unique order identifier generated by Zenkipay. (required)
     * @param  string $zenki_track_id Unique tracking identifier generated by Zenkipay. (required)
     * @param  string $content_type Content type accepted. (required)
     * @param  string $accept Accepted formats. (required)
     * @param  string $x_zenki_plugin_id Unique customer identifier used to establish connection with Zenkipay services. (optional)
     * @param  string $accept_language Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
     * @param  \Zenkipay\Model\AddTrackingEvent $add_tracking_event A JSON structure will be sent that will have the required information to update the shipping status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEventTracking'] to see the possible values for this operation
     *
     * @throws \Zenkipay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Zenkipay\Model\TrackingEventsInner[]|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEventTrackingWithHttpInfo($zenki_order_id, $zenki_track_id, $content_type, $accept, $x_zenki_plugin_id = null, $accept_language = null, $add_tracking_event = null, string $contentType = self::contentTypes['addEventTracking'][0])
    {
        $request = $this->addEventTrackingRequest($zenki_order_id, $zenki_track_id, $content_type, $accept, $x_zenki_plugin_id, $accept_language, $add_tracking_event, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Zenkipay\Model\TrackingEventsInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\TrackingEventsInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\TrackingEventsInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 428:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Zenkipay\Model\TrackingEventsInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\TrackingEventsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addEventTrackingAsync
     *
     * Shipping Status Update
     *
     * @param  string $zenki_order_id Unique order identifier generated by Zenkipay. (required)
     * @param  string $zenki_track_id Unique tracking identifier generated by Zenkipay. (required)
     * @param  string $content_type Content type accepted. (required)
     * @param  string $accept Accepted formats. (required)
     * @param  string $x_zenki_plugin_id Unique customer identifier used to establish connection with Zenkipay services. (optional)
     * @param  string $accept_language Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
     * @param  \Zenkipay\Model\AddTrackingEvent $add_tracking_event A JSON structure will be sent that will have the required information to update the shipping status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEventTracking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEventTrackingAsync($zenki_order_id, $zenki_track_id, $content_type, $accept, $x_zenki_plugin_id = null, $accept_language = null, $add_tracking_event = null, string $contentType = self::contentTypes['addEventTracking'][0])
    {
        return $this->addEventTrackingAsyncWithHttpInfo($zenki_order_id, $zenki_track_id, $content_type, $accept, $x_zenki_plugin_id, $accept_language, $add_tracking_event, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEventTrackingAsyncWithHttpInfo
     *
     * Shipping Status Update
     *
     * @param  string $zenki_order_id Unique order identifier generated by Zenkipay. (required)
     * @param  string $zenki_track_id Unique tracking identifier generated by Zenkipay. (required)
     * @param  string $content_type Content type accepted. (required)
     * @param  string $accept Accepted formats. (required)
     * @param  string $x_zenki_plugin_id Unique customer identifier used to establish connection with Zenkipay services. (optional)
     * @param  string $accept_language Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
     * @param  \Zenkipay\Model\AddTrackingEvent $add_tracking_event A JSON structure will be sent that will have the required information to update the shipping status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEventTracking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEventTrackingAsyncWithHttpInfo($zenki_order_id, $zenki_track_id, $content_type, $accept, $x_zenki_plugin_id = null, $accept_language = null, $add_tracking_event = null, string $contentType = self::contentTypes['addEventTracking'][0])
    {
        $returnType = '\Zenkipay\Model\TrackingEventsInner[]';
        $request = $this->addEventTrackingRequest($zenki_order_id, $zenki_track_id, $content_type, $accept, $x_zenki_plugin_id, $accept_language, $add_tracking_event, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEventTracking'
     *
     * @param  string $zenki_order_id Unique order identifier generated by Zenkipay. (required)
     * @param  string $zenki_track_id Unique tracking identifier generated by Zenkipay. (required)
     * @param  string $content_type Content type accepted. (required)
     * @param  string $accept Accepted formats. (required)
     * @param  string $x_zenki_plugin_id Unique customer identifier used to establish connection with Zenkipay services. (optional)
     * @param  string $accept_language Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
     * @param  \Zenkipay\Model\AddTrackingEvent $add_tracking_event A JSON structure will be sent that will have the required information to update the shipping status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEventTracking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addEventTrackingRequest($zenki_order_id, $zenki_track_id, $content_type, $accept, $x_zenki_plugin_id = null, $accept_language = null, $add_tracking_event = null, string $contentType = self::contentTypes['addEventTracking'][0])
    {

        // verify the required parameter 'zenki_order_id' is set
        if ($zenki_order_id === null || (is_array($zenki_order_id) && count($zenki_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zenki_order_id when calling addEventTracking'
            );
        }

        // verify the required parameter 'zenki_track_id' is set
        if ($zenki_track_id === null || (is_array($zenki_track_id) && count($zenki_track_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zenki_track_id when calling addEventTracking'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling addEventTracking'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling addEventTracking'
            );
        }





        $resourcePath = '/v1/pay/orders/{zenkiOrderId}/tracking/{zenkiTrackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_zenki_plugin_id !== null) {
            $headerParams['X-ZENKI-PLUGIN-ID'] = ObjectSerializer::toHeaderValue($x_zenki_plugin_id);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($zenki_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'zenkiOrderId' . '}',
                ObjectSerializer::toPathValue($zenki_order_id),
                $resourcePath
            );
        }
        // path params
        if ($zenki_track_id !== null) {
            $resourcePath = str_replace(
                '{' . 'zenkiTrackId' . '}',
                ObjectSerializer::toPathValue($zenki_track_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_tracking_event)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_tracking_event));
            } else {
                $httpBody = $add_tracking_event;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (ACCESS_TOKEN) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation registerTrackingOrders
     *
     * Registration number for tracking
     *
     * @param  string $zenki_order_id Unique order identifier generated by Zenkipay. (required)
     * @param  string $content_type Content type accepted. (required)
     * @param  string $accept Accepted formats. (required)
     * @param  string $x_zenki_plugin_id Unique customer identifier used to establish connection with Zenkipay services. (optional)
     * @param  string $accept_language Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
     * @param  \Zenkipay\Model\AddTracking $add_tracking The registration of a tracking number associated with a shipment may be requested so that Zenkipay can track the delivery process, as reported by the courier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerTrackingOrders'] to see the possible values for this operation
     *
     * @throws \Zenkipay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Zenkipay\Model\Tracking|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse
     */
    public function registerTrackingOrders($zenki_order_id, $content_type, $accept, $x_zenki_plugin_id = null, $accept_language = null, $add_tracking = null, string $contentType = self::contentTypes['registerTrackingOrders'][0])
    {
        list($response) = $this->registerTrackingOrdersWithHttpInfo($zenki_order_id, $content_type, $accept, $x_zenki_plugin_id, $accept_language, $add_tracking, $contentType);
        return $response;
    }

    /**
     * Operation registerTrackingOrdersWithHttpInfo
     *
     * Registration number for tracking
     *
     * @param  string $zenki_order_id Unique order identifier generated by Zenkipay. (required)
     * @param  string $content_type Content type accepted. (required)
     * @param  string $accept Accepted formats. (required)
     * @param  string $x_zenki_plugin_id Unique customer identifier used to establish connection with Zenkipay services. (optional)
     * @param  string $accept_language Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
     * @param  \Zenkipay\Model\AddTracking $add_tracking The registration of a tracking number associated with a shipment may be requested so that Zenkipay can track the delivery process, as reported by the courier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerTrackingOrders'] to see the possible values for this operation
     *
     * @throws \Zenkipay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Zenkipay\Model\Tracking|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse|\Zenkipay\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function registerTrackingOrdersWithHttpInfo($zenki_order_id, $content_type, $accept, $x_zenki_plugin_id = null, $accept_language = null, $add_tracking = null, string $contentType = self::contentTypes['registerTrackingOrders'][0])
    {
        $request = $this->registerTrackingOrdersRequest($zenki_order_id, $content_type, $accept, $x_zenki_plugin_id, $accept_language, $add_tracking, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Zenkipay\Model\Tracking' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\Tracking' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\Tracking', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 428:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Zenkipay\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zenkipay\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zenkipay\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Zenkipay\Model\Tracking';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\Tracking',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zenkipay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation registerTrackingOrdersAsync
     *
     * Registration number for tracking
     *
     * @param  string $zenki_order_id Unique order identifier generated by Zenkipay. (required)
     * @param  string $content_type Content type accepted. (required)
     * @param  string $accept Accepted formats. (required)
     * @param  string $x_zenki_plugin_id Unique customer identifier used to establish connection with Zenkipay services. (optional)
     * @param  string $accept_language Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
     * @param  \Zenkipay\Model\AddTracking $add_tracking The registration of a tracking number associated with a shipment may be requested so that Zenkipay can track the delivery process, as reported by the courier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerTrackingOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerTrackingOrdersAsync($zenki_order_id, $content_type, $accept, $x_zenki_plugin_id = null, $accept_language = null, $add_tracking = null, string $contentType = self::contentTypes['registerTrackingOrders'][0])
    {
        return $this->registerTrackingOrdersAsyncWithHttpInfo($zenki_order_id, $content_type, $accept, $x_zenki_plugin_id, $accept_language, $add_tracking, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation registerTrackingOrdersAsyncWithHttpInfo
     *
     * Registration number for tracking
     *
     * @param  string $zenki_order_id Unique order identifier generated by Zenkipay. (required)
     * @param  string $content_type Content type accepted. (required)
     * @param  string $accept Accepted formats. (required)
     * @param  string $x_zenki_plugin_id Unique customer identifier used to establish connection with Zenkipay services. (optional)
     * @param  string $accept_language Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
     * @param  \Zenkipay\Model\AddTracking $add_tracking The registration of a tracking number associated with a shipment may be requested so that Zenkipay can track the delivery process, as reported by the courier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerTrackingOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerTrackingOrdersAsyncWithHttpInfo($zenki_order_id, $content_type, $accept, $x_zenki_plugin_id = null, $accept_language = null, $add_tracking = null, string $contentType = self::contentTypes['registerTrackingOrders'][0])
    {
        $returnType = '\Zenkipay\Model\Tracking';
        $request = $this->registerTrackingOrdersRequest($zenki_order_id, $content_type, $accept, $x_zenki_plugin_id, $accept_language, $add_tracking, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'registerTrackingOrders'
     *
     * @param  string $zenki_order_id Unique order identifier generated by Zenkipay. (required)
     * @param  string $content_type Content type accepted. (required)
     * @param  string $accept Accepted formats. (required)
     * @param  string $x_zenki_plugin_id Unique customer identifier used to establish connection with Zenkipay services. (optional)
     * @param  string $accept_language Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
     * @param  \Zenkipay\Model\AddTracking $add_tracking The registration of a tracking number associated with a shipment may be requested so that Zenkipay can track the delivery process, as reported by the courier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerTrackingOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function registerTrackingOrdersRequest($zenki_order_id, $content_type, $accept, $x_zenki_plugin_id = null, $accept_language = null, $add_tracking = null, string $contentType = self::contentTypes['registerTrackingOrders'][0])
    {

        // verify the required parameter 'zenki_order_id' is set
        if ($zenki_order_id === null || (is_array($zenki_order_id) && count($zenki_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zenki_order_id when calling registerTrackingOrders'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling registerTrackingOrders'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling registerTrackingOrders'
            );
        }





        $resourcePath = '/v1/pay/orders/{zenkiOrderId}/tracking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_zenki_plugin_id !== null) {
            $headerParams['X-ZENKI-PLUGIN-ID'] = ObjectSerializer::toHeaderValue($x_zenki_plugin_id);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($zenki_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'zenkiOrderId' . '}',
                ObjectSerializer::toPathValue($zenki_order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_tracking)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_tracking));
            } else {
                $httpBody = $add_tracking;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (ACCESS_TOKEN) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
