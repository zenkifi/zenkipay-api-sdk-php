<?php
/**
 * Refund
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  fi.zenki.zenkipay.api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zenkipay API
 *
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace fi.zenki.zenkipay.api\fi.zenki.zenkipay.api.model;

use \ArrayAccess;
use \fi.zenki.zenkipay.api\ObjectSerializer;

/**
 * Refund Class Doc Comment
 *
 * @category Class
 * @description Registered refund detail.
 * @package  fi.zenki.zenkipay.api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Refund implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Refund';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'zenki_refund_id' => 'string',
        'reason' => 'string',
        'fiat_original_payment' => '\fi.zenki.zenkipay.api\fi.zenki.zenkipay.api.model\RefundFiatOriginalPayment',
        'crypto_payment' => '\fi.zenki.zenkipay.api\fi.zenki.zenkipay.api.model\CryptoPayment',
        'status' => 'string',
        'placed_at' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'zenki_refund_id' => null,
        'reason' => null,
        'fiat_original_payment' => null,
        'crypto_payment' => null,
        'status' => null,
        'placed_at' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'zenki_refund_id' => false,
		'reason' => false,
		'fiat_original_payment' => false,
		'crypto_payment' => false,
		'status' => false,
		'placed_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'zenki_refund_id' => 'zenkiRefundId',
        'reason' => 'reason',
        'fiat_original_payment' => 'fiatOriginalPayment',
        'crypto_payment' => 'cryptoPayment',
        'status' => 'status',
        'placed_at' => 'placedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'zenki_refund_id' => 'setZenkiRefundId',
        'reason' => 'setReason',
        'fiat_original_payment' => 'setFiatOriginalPayment',
        'crypto_payment' => 'setCryptoPayment',
        'status' => 'setStatus',
        'placed_at' => 'setPlacedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'zenki_refund_id' => 'getZenkiRefundId',
        'reason' => 'getReason',
        'fiat_original_payment' => 'getFiatOriginalPayment',
        'crypto_payment' => 'getCryptoPayment',
        'status' => 'getStatus',
        'placed_at' => 'getPlacedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_PENDING = 'PENDING';
    public const STATUS_AWAITING_REFUND = 'AWAITING_REFUND';
    public const STATUS_REFUNDED = 'REFUNDED';
    public const STATUS_FAILED = 'FAILED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_AWAITING_REFUND,
            self::STATUS_REFUNDED,
            self::STATUS_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('zenki_refund_id', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('fiat_original_payment', $data ?? [], null);
        $this->setIfExists('crypto_payment', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('placed_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['zenki_refund_id'] === null) {
            $invalidProperties[] = "'zenki_refund_id' can't be null";
        }
        if ((mb_strlen($this->container['zenki_refund_id']) > 128)) {
            $invalidProperties[] = "invalid value for 'zenki_refund_id', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        if ((mb_strlen($this->container['reason']) > 100)) {
            $invalidProperties[] = "invalid value for 'reason', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['crypto_payment'] === null) {
            $invalidProperties[] = "'crypto_payment' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['placed_at'] === null) {
            $invalidProperties[] = "'placed_at' can't be null";
        }
        if (($this->container['placed_at'] < 0)) {
            $invalidProperties[] = "invalid value for 'placed_at', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets zenki_refund_id
     *
     * @return string
     */
    public function getZenkiRefundId()
    {
        return $this->container['zenki_refund_id'];
    }

    /**
     * Sets zenki_refund_id
     *
     * @param string $zenki_refund_id Unique identifier of the refund generated by Zenkipay.
     *
     * @return self
     */
    public function setZenkiRefundId($zenki_refund_id)
    {
        if ((mb_strlen($zenki_refund_id) > 128)) {
            throw new \InvalidArgumentException('invalid length for $zenki_refund_id when calling Refund., must be smaller than or equal to 128.');
        }


        if (is_null($zenki_refund_id)) {
            throw new \InvalidArgumentException('non-nullable zenki_refund_id cannot be null');
        }

        $this->container['zenki_refund_id'] = $zenki_refund_id;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason Reason or reason for the refund.
     *
     * @return self
     */
    public function setReason($reason)
    {
        if ((mb_strlen($reason) > 100)) {
            throw new \InvalidArgumentException('invalid length for $reason when calling Refund., must be smaller than or equal to 100.');
        }


        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }

        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets fiat_original_payment
     *
     * @return \fi.zenki.zenkipay.api\fi.zenki.zenkipay.api.model\RefundFiatOriginalPayment|null
     */
    public function getFiatOriginalPayment()
    {
        return $this->container['fiat_original_payment'];
    }

    /**
     * Sets fiat_original_payment
     *
     * @param \fi.zenki.zenkipay.api\fi.zenki.zenkipay.api.model\RefundFiatOriginalPayment|null $fiat_original_payment fiat_original_payment
     *
     * @return self
     */
    public function setFiatOriginalPayment($fiat_original_payment)
    {

        if (is_null($fiat_original_payment)) {
            throw new \InvalidArgumentException('non-nullable fiat_original_payment cannot be null');
        }

        $this->container['fiat_original_payment'] = $fiat_original_payment;

        return $this;
    }

    /**
     * Gets crypto_payment
     *
     * @return \fi.zenki.zenkipay.api\fi.zenki.zenkipay.api.model\CryptoPayment
     */
    public function getCryptoPayment()
    {
        return $this->container['crypto_payment'];
    }

    /**
     * Sets crypto_payment
     *
     * @param \fi.zenki.zenkipay.api\fi.zenki.zenkipay.api.model\CryptoPayment $crypto_payment crypto_payment
     *
     * @return self
     */
    public function setCryptoPayment($crypto_payment)
    {

        if (is_null($crypto_payment)) {
            throw new \InvalidArgumentException('non-nullable crypto_payment cannot be null');
        }

        $this->container['crypto_payment'] = $crypto_payment;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Estado del reembolso  Posibles valroes: * PENDING         - Waiting for the refund to be applied. * AWAITING_REFUND - A first confirmation has been received by the blockchain network, it is waiting to have the required confirmations. * REFUNDED        - The product or service has been refunded to the buyer. * FAILED          - A problem has arisen when making the refund.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets placed_at
     *
     * @return int
     */
    public function getPlacedAt()
    {
        return $this->container['placed_at'];
    }

    /**
     * Sets placed_at
     *
     * @param int $placed_at Date and time when the merchant sent the refund to Zenkipay, in milliseconds and UTC format.        The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds (in ISO 8601: 1970-01-01T00: 00:00Z)
     *
     * @return self
     */
    public function setPlacedAt($placed_at)
    {

        if (($placed_at < 0)) {
            throw new \InvalidArgumentException('invalid value for $placed_at when calling Refund., must be bigger than or equal to 0.');
        }


        if (is_null($placed_at)) {
            throw new \InvalidArgumentException('non-nullable placed_at cannot be null');
        }

        $this->container['placed_at'] = $placed_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


