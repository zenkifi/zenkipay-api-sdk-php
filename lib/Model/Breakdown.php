<?php
/**
 * Breakdown
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zenkipay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zenkipay API
 *
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zenkipay\Model;

use \ArrayAccess;
use \Zenkipay\ObjectSerializer;

/**
 * Breakdown Class Doc Comment
 *
 * @category Class
 * @description Summary of shopping cart amounts.
 * @package  Zenkipay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Breakdown implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Breakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency_code_iso3' => 'string',
        'total_items_amount' => 'float',
        'shipment_amount' => 'float',
        'subtotal_amount' => 'float',
        'taxes_amount' => 'float',
        'local_taxes_amount' => 'float',
        'import_costs' => 'float',
        'discount_amount' => 'float',
        'additional_charges' => 'array<string,string>',
        'grand_total_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currency_code_iso3' => null,
        'total_items_amount' => 'double',
        'shipment_amount' => 'double',
        'subtotal_amount' => 'double',
        'taxes_amount' => 'double',
        'local_taxes_amount' => 'double',
        'import_costs' => 'double',
        'discount_amount' => 'double',
        'additional_charges' => null,
        'grand_total_amount' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currency_code_iso3' => false,
		'total_items_amount' => false,
		'shipment_amount' => false,
		'subtotal_amount' => false,
		'taxes_amount' => false,
		'local_taxes_amount' => true,
		'import_costs' => true,
		'discount_amount' => true,
		'additional_charges' => true,
		'grand_total_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_code_iso3' => 'currencyCodeIso3',
        'total_items_amount' => 'totalItemsAmount',
        'shipment_amount' => 'shipmentAmount',
        'subtotal_amount' => 'subtotalAmount',
        'taxes_amount' => 'taxesAmount',
        'local_taxes_amount' => 'localTaxes_amount',
        'import_costs' => 'importCosts',
        'discount_amount' => 'discountAmount',
        'additional_charges' => 'additionalCharges',
        'grand_total_amount' => 'grandTotalAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_code_iso3' => 'setCurrencyCodeIso3',
        'total_items_amount' => 'setTotalItemsAmount',
        'shipment_amount' => 'setShipmentAmount',
        'subtotal_amount' => 'setSubtotalAmount',
        'taxes_amount' => 'setTaxesAmount',
        'local_taxes_amount' => 'setLocalTaxesAmount',
        'import_costs' => 'setImportCosts',
        'discount_amount' => 'setDiscountAmount',
        'additional_charges' => 'setAdditionalCharges',
        'grand_total_amount' => 'setGrandTotalAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_code_iso3' => 'getCurrencyCodeIso3',
        'total_items_amount' => 'getTotalItemsAmount',
        'shipment_amount' => 'getShipmentAmount',
        'subtotal_amount' => 'getSubtotalAmount',
        'taxes_amount' => 'getTaxesAmount',
        'local_taxes_amount' => 'getLocalTaxesAmount',
        'import_costs' => 'getImportCosts',
        'discount_amount' => 'getDiscountAmount',
        'additional_charges' => 'getAdditionalCharges',
        'grand_total_amount' => 'getGrandTotalAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('currency_code_iso3', $data ?? [], null);
        $this->setIfExists('total_items_amount', $data ?? [], null);
        $this->setIfExists('shipment_amount', $data ?? [], null);
        $this->setIfExists('subtotal_amount', $data ?? [], null);
        $this->setIfExists('taxes_amount', $data ?? [], null);
        $this->setIfExists('local_taxes_amount', $data ?? [], null);
        $this->setIfExists('import_costs', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('additional_charges', $data ?? [], null);
        $this->setIfExists('grand_total_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currency_code_iso3'] === null) {
            $invalidProperties[] = "'currency_code_iso3' can't be null";
        }
        if ((mb_strlen($this->container['currency_code_iso3']) > 5)) {
            $invalidProperties[] = "invalid value for 'currency_code_iso3', the character length must be smaller than or equal to 5.";
        }

        if ($this->container['total_items_amount'] === null) {
            $invalidProperties[] = "'total_items_amount' can't be null";
        }
        if (($this->container['total_items_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_items_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['shipment_amount'] === null) {
            $invalidProperties[] = "'shipment_amount' can't be null";
        }
        if (($this->container['shipment_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipment_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['subtotal_amount'] === null) {
            $invalidProperties[] = "'subtotal_amount' can't be null";
        }
        if (($this->container['subtotal_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'subtotal_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['taxes_amount'] === null) {
            $invalidProperties[] = "'taxes_amount' can't be null";
        }
        if (($this->container['taxes_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'taxes_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['local_taxes_amount']) && ($this->container['local_taxes_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'local_taxes_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['import_costs']) && ($this->container['import_costs'] < 0)) {
            $invalidProperties[] = "invalid value for 'import_costs', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['discount_amount']) && ($this->container['discount_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['grand_total_amount'] === null) {
            $invalidProperties[] = "'grand_total_amount' can't be null";
        }
        if (($this->container['grand_total_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'grand_total_amount', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_code_iso3
     *
     * @return string
     */
    public function getCurrencyCodeIso3()
    {
        return $this->container['currency_code_iso3'];
    }

    /**
     * Sets currency_code_iso3
     *
     * @param string $currency_code_iso3 Unique code of the currency of the country, the definition of the ISO 4217 standard is used with 3 characters, see: https://es.wikipedia.org/wiki/ISO_4217 or https://www.iso.org/iso-4217-currency-codes.html.
     *
     * @return self
     */
    public function setCurrencyCodeIso3($currency_code_iso3)
    {
        if ((mb_strlen($currency_code_iso3) > 5)) {
            throw new \InvalidArgumentException('invalid length for $currency_code_iso3 when calling Breakdown., must be smaller than or equal to 5.');
        }


        if (is_null($currency_code_iso3)) {
            throw new \InvalidArgumentException('non-nullable currency_code_iso3 cannot be null');
        }

        $this->container['currency_code_iso3'] = $currency_code_iso3;

        return $this;
    }

    /**
     * Gets total_items_amount
     *
     * @return float
     */
    public function getTotalItemsAmount()
    {
        return $this->container['total_items_amount'];
    }

    /**
     * Sets total_items_amount
     *
     * @param float $total_items_amount Sum of the total cost of the items (quantity * unitPrice).
     *
     * @return self
     */
    public function setTotalItemsAmount($total_items_amount)
    {

        if (($total_items_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_items_amount when calling Breakdown., must be bigger than or equal to 0.');
        }


        if (is_null($total_items_amount)) {
            throw new \InvalidArgumentException('non-nullable total_items_amount cannot be null');
        }

        $this->container['total_items_amount'] = $total_items_amount;

        return $this;
    }

    /**
     * Gets shipment_amount
     *
     * @return float
     */
    public function getShipmentAmount()
    {
        return $this->container['shipment_amount'];
    }

    /**
     * Sets shipment_amount
     *
     * @param float $shipment_amount Shipping cost, in case of not applying its value must be 0.
     *
     * @return self
     */
    public function setShipmentAmount($shipment_amount)
    {

        if (($shipment_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipment_amount when calling Breakdown., must be bigger than or equal to 0.');
        }


        if (is_null($shipment_amount)) {
            throw new \InvalidArgumentException('non-nullable shipment_amount cannot be null');
        }

        $this->container['shipment_amount'] = $shipment_amount;

        return $this;
    }

    /**
     * Gets subtotal_amount
     *
     * @return float
     */
    public function getSubtotalAmount()
    {
        return $this->container['subtotal_amount'];
    }

    /**
     * Sets subtotal_amount
     *
     * @param float $subtotal_amount Sum of total_items_amount plus shipment_amount.
     *
     * @return self
     */
    public function setSubtotalAmount($subtotal_amount)
    {

        if (($subtotal_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $subtotal_amount when calling Breakdown., must be bigger than or equal to 0.');
        }


        if (is_null($subtotal_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal_amount cannot be null');
        }

        $this->container['subtotal_amount'] = $subtotal_amount;

        return $this;
    }

    /**
     * Gets taxes_amount
     *
     * @return float
     */
    public function getTaxesAmount()
    {
        return $this->container['taxes_amount'];
    }

    /**
     * Sets taxes_amount
     *
     * @param float $taxes_amount Taxes, if not applied, its value must be 0.
     *
     * @return self
     */
    public function setTaxesAmount($taxes_amount)
    {

        if (($taxes_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $taxes_amount when calling Breakdown., must be bigger than or equal to 0.');
        }


        if (is_null($taxes_amount)) {
            throw new \InvalidArgumentException('non-nullable taxes_amount cannot be null');
        }

        $this->container['taxes_amount'] = $taxes_amount;

        return $this;
    }

    /**
     * Gets local_taxes_amount
     *
     * @return float|null
     */
    public function getLocalTaxesAmount()
    {
        return $this->container['local_taxes_amount'];
    }

    /**
     * Sets local_taxes_amount
     *
     * @param float|null $local_taxes_amount Local taxes, if not applied, its value must be 0.
     *
     * @return self
     */
    public function setLocalTaxesAmount($local_taxes_amount)
    {

        if (!is_null($local_taxes_amount) && ($local_taxes_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $local_taxes_amount when calling Breakdown., must be bigger than or equal to 0.');
        }


        if (is_null($local_taxes_amount)) {
            array_push($this->openAPINullablesSetToNull, 'local_taxes_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('local_taxes_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['local_taxes_amount'] = $local_taxes_amount;

        return $this;
    }

    /**
     * Gets import_costs
     *
     * @return float|null
     */
    public function getImportCosts()
    {
        return $this->container['import_costs'];
    }

    /**
     * Sets import_costs
     *
     * @param float|null $import_costs Import costs, if not applied, its value must be 0.
     *
     * @return self
     */
    public function setImportCosts($import_costs)
    {

        if (!is_null($import_costs) && ($import_costs < 0)) {
            throw new \InvalidArgumentException('invalid value for $import_costs when calling Breakdown., must be bigger than or equal to 0.');
        }


        if (is_null($import_costs)) {
            array_push($this->openAPINullablesSetToNull, 'import_costs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('import_costs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['import_costs'] = $import_costs;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return float|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param float|null $discount_amount Discount of your merchant, in case of not applying its value must be 0.
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {

        if (!is_null($discount_amount) && ($discount_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_amount when calling Breakdown., must be bigger than or equal to 0.');
        }


        if (is_null($discount_amount)) {
            array_push($this->openAPINullablesSetToNull, 'discount_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets additional_charges
     *
     * @return array<string,string>|null
     */
    public function getAdditionalCharges()
    {
        return $this->container['additional_charges'];
    }

    /**
     * Sets additional_charges
     *
     * @param array<string,string>|null $additional_charges Additional charges, consists of a key/value object that comprises the description of the charge/amount respectively.
     *
     * @return self
     */
    public function setAdditionalCharges($additional_charges)
    {

        if (is_null($additional_charges)) {
            array_push($this->openAPINullablesSetToNull, 'additional_charges');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_charges', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['additional_charges'] = $additional_charges;

        return $this;
    }

    /**
     * Gets grand_total_amount
     *
     * @return float
     */
    public function getGrandTotalAmount()
    {
        return $this->container['grand_total_amount'];
    }

    /**
     * Sets grand_total_amount
     *
     * @param float $grand_total_amount Sum of subtotalAmount, taxesAmount, localTaxesAmount, importCosts, and each value of additionalCharges minus discountAmount.
     *
     * @return self
     */
    public function setGrandTotalAmount($grand_total_amount)
    {

        if (($grand_total_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $grand_total_amount when calling Breakdown., must be bigger than or equal to 0.');
        }


        if (is_null($grand_total_amount)) {
            throw new \InvalidArgumentException('non-nullable grand_total_amount cannot be null');
        }

        $this->container['grand_total_amount'] = $grand_total_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


