<?php
/**
 * TrackingExternalCourier
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zenkipay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zenkipay API
 *
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zenkipay\Model;

use \ArrayAccess;
use \Zenkipay\ObjectSerializer;

/**
 * TrackingExternalCourier Class Doc Comment
 *
 * @category Class
 * @description Courier details used for the shipment.
 * @package  Zenkipay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TrackingExternalCourier implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tracking_externalCourier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'country_code_iso2' => 'string',
        'url' => 'string',
        'name' => 'string',
        'name_zh_cn' => 'string',
        'name_zh_hk' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'key' => null,
        'country_code_iso2' => null,
        'url' => null,
        'name' => null,
        'name_zh_cn' => null,
        'name_zh_hk' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'key' => false,
		'country_code_iso2' => false,
		'url' => true,
		'name' => true,
		'name_zh_cn' => true,
		'name_zh_hk' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'country_code_iso2' => 'countryCodeIso2',
        'url' => 'url',
        'name' => 'name',
        'name_zh_cn' => 'nameZhCn',
        'name_zh_hk' => 'nameZhHk'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'country_code_iso2' => 'setCountryCodeIso2',
        'url' => 'setUrl',
        'name' => 'setName',
        'name_zh_cn' => 'setNameZhCn',
        'name_zh_hk' => 'setNameZhHk'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'country_code_iso2' => 'getCountryCodeIso2',
        'url' => 'getUrl',
        'name' => 'getName',
        'name_zh_cn' => 'getNameZhCn',
        'name_zh_hk' => 'getNameZhHk'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('country_code_iso2', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('name_zh_cn', $data ?? [], null);
        $this->setIfExists('name_zh_hk', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ((mb_strlen($this->container['key']) > 30)) {
            $invalidProperties[] = "invalid value for 'key', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['country_code_iso2'] === null) {
            $invalidProperties[] = "'country_code_iso2' can't be null";
        }
        if ((mb_strlen($this->container['country_code_iso2']) > 5)) {
            $invalidProperties[] = "invalid value for 'country_code_iso2', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 255)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name_zh_cn']) && (mb_strlen($this->container['name_zh_cn']) > 50)) {
            $invalidProperties[] = "invalid value for 'name_zh_cn', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name_zh_hk']) && (mb_strlen($this->container['name_zh_hk']) > 50)) {
            $invalidProperties[] = "invalid value for 'name_zh_hk', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key Unique messaging identifier provided by Zenkipay:  Example of some couriers:   * 190135  139Express  http://www.139express.com/   * 190524  1688        https://www.1688.com/   * 190659  17EXP       https://www.17-exp.com/   * 190349  1TONG       http://www.1tongexpress.com/  To know the complete list of couriers see: https://developer.zenki.fi/global-v1/docs/zenkipay-recursos-catalogos-mensajerias-soportadas
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        if ((mb_strlen($key) > 30)) {
            throw new \InvalidArgumentException('invalid length for $key when calling TrackingExternalCourier., must be smaller than or equal to 30.');
        }

        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets country_code_iso2
     *
     * @return string
     */
    public function getCountryCodeIso2()
    {
        return $this->container['country_code_iso2'];
    }

    /**
     * Sets country_code_iso2
     *
     * @param string $country_code_iso2 Unique country identifier, the definition of the ISO_3166-1 standard is used with 2 characters, see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 or https://www.iso.org/iso-3166-country-codes.html
     *
     * @return self
     */
    public function setCountryCodeIso2($country_code_iso2)
    {
        if (is_null($country_code_iso2)) {
            throw new \InvalidArgumentException('non-nullable country_code_iso2 cannot be null');
        }
        if ((mb_strlen($country_code_iso2) > 5)) {
            throw new \InvalidArgumentException('invalid length for $country_code_iso2 when calling TrackingExternalCourier., must be smaller than or equal to 5.');
        }

        $this->container['country_code_iso2'] = $country_code_iso2;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Courier website.  To know the complete list of couriers see: https://developer.zenki.fi/global-v1/docs/zenkipay-recursos-catalogos-mensajerias-soportadas
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($url) && (mb_strlen($url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $url when calling TrackingExternalCourier., must be smaller than or equal to 255.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Courier name.  To know the complete list of couriers see: https://developer.zenki.fi/global-v1/docs/zenkipay-recursos-catalogos-mensajerias-soportadas
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling TrackingExternalCourier., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_zh_cn
     *
     * @return string|null
     */
    public function getNameZhCn()
    {
        return $this->container['name_zh_cn'];
    }

    /**
     * Sets name_zh_cn
     *
     * @param string|null $name_zh_cn Courier name.  To know the complete list of couriers see: https://developer.zenki.fi/global-v1/docs/zenkipay-recursos-catalogos-mensajerias-soportadas
     *
     * @return self
     */
    public function setNameZhCn($name_zh_cn)
    {
        if (is_null($name_zh_cn)) {
            array_push($this->openAPINullablesSetToNull, 'name_zh_cn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name_zh_cn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name_zh_cn) && (mb_strlen($name_zh_cn) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name_zh_cn when calling TrackingExternalCourier., must be smaller than or equal to 50.');
        }

        $this->container['name_zh_cn'] = $name_zh_cn;

        return $this;
    }

    /**
     * Gets name_zh_hk
     *
     * @return string|null
     */
    public function getNameZhHk()
    {
        return $this->container['name_zh_hk'];
    }

    /**
     * Sets name_zh_hk
     *
     * @param string|null $name_zh_hk Courier name.        To know the complete list of couriers see: https://developer.zenki.fi/global-v1/docs/zenkipay-recursos-catalogos-mensajerias-soportadas
     *
     * @return self
     */
    public function setNameZhHk($name_zh_hk)
    {
        if (is_null($name_zh_hk)) {
            array_push($this->openAPINullablesSetToNull, 'name_zh_hk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name_zh_hk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name_zh_hk) && (mb_strlen($name_zh_hk) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name_zh_hk when calling TrackingExternalCourier., must be smaller than or equal to 50.');
        }

        $this->container['name_zh_hk'] = $name_zh_hk;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


