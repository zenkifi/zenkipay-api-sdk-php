<?php
/**
 * BreakdownTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  fi.zenki.zenkipay.api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zenkipay API
 *
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace fi.zenki.zenkipay.api\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * BreakdownTest Class Doc Comment
 *
 * @category    Class
 * @description Summary of shopping cart amounts.
 * @package     fi.zenki.zenkipay.api
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class BreakdownTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "Breakdown"
     */
    public function testBreakdown()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "currency_code_iso3"
     */
    public function testPropertyCurrencyCodeIso3()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "total_items_amount"
     */
    public function testPropertyTotalItemsAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shipment_amount"
     */
    public function testPropertyShipmentAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "subtotal_amount"
     */
    public function testPropertySubtotalAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "taxes_amount"
     */
    public function testPropertyTaxesAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "local_taxes_amount"
     */
    public function testPropertyLocalTaxesAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "import_costs"
     */
    public function testPropertyImportCosts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "discount_amount"
     */
    public function testPropertyDiscountAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "additional_charges"
     */
    public function testPropertyAdditionalCharges()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "grand_total_amount"
     */
    public function testPropertyGrandTotalAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
